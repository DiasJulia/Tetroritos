{"version":3,"sources":["logo.svg","gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledDisplay.js","components/Display.jsx","components/styles/StyledCell.js","components/Cell.jsx","components/styles/StyledStage.js","components/Stage.jsx","components/styles/StyledStartButton.js","components/StartButton.jsx","components/ArrowButton.jsx","components/Tetris.jsx","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js","img/bg.png"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledDisplay","props","gameOver","Display","text","StyledCell","type","Cell","StyledStage","height","width","Stage","key","StyledStartButton","button","StartButton","callback","onClick","icon","Tetris","dropTime","setDropTime","setGameOver","window","innerWidth","isMobile","setPlayer","useCallback","STAGE_WIDTH","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","console","log","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","className","ArrowButton","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.44047b83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n    Array.from(Array(STAGE_HEIGHT), () =>\r\n        new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n    )\r\n\r\nexport const checkCollision = (player, stage, { x:  moveX, y: moveY} ) => {\r\n    for(let y = 0; y < player.tetromino.length; y+=1){\r\n        for (let x = 0; x<player.tetromino[y].length; x+=1){\r\n            //Verificar se estÃ¡ na celula de uma pecinha\r\n            if(player.tetromino[y][x] !== 0){\r\n                if(\r\n                    //Verificar se o movimento estÃ¡ dentro dos limites do jogo\r\n                    !stage[y + player.pos.y + moveY] ||\r\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                    //Verificar se hÃ¡ alguma celula colidida abaixo\r\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n                    'clear'\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    return false;\r\n}","import styled from 'styled-components';\r\n// BG Image\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n\r\n  @media(max-width: 930px){\r\n    display: block;\r\n    padding: 10px;\r\n  }\r\n`;","export const TETROMINOS = {\r\n    0: {shape: [[0]], color:'0, 0, 0' },\r\n    I: {\r\n        shape: [\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n        ],\r\n        color: '80, 227, 230',\r\n    },\r\n    J: {\r\n        shape: [\r\n            [0, 'J', 0],\r\n            [0, 'J', 0],\r\n            ['J', 'J', 0],\r\n        ],\r\n        color: '36, 95, 223',\r\n    },\r\n    L: {\r\n        shape: [\r\n            [0, 'L', 0],\r\n            [0, 'L', 0],\r\n            [0, 'L', 'L'],\r\n        ],\r\n        color: '223, 173, 36',\r\n    },\r\n    O: {\r\n        shape: [\r\n            ['O', 'O'],\r\n            ['O', 'O'],\r\n\r\n        ],\r\n        color: '223, 217, 36',\r\n    },\r\n    S: {\r\n        shape: [\r\n            [0, 'S', 'S'],\r\n            ['S', 'S', 0],\r\n            [0, 0, 0],\r\n        ],\r\n        color: '48, 211, 56',\r\n    },\r\n    T: {\r\n        shape: [\r\n            [0, 0, 0],\r\n            ['T', 'T', 'T'],\r\n            [0, 'T', 0],\r\n        ],\r\n        color: '132, 61, 36',\r\n    },\r\n    Z: {\r\n        shape: [\r\n            ['Z', 'Z', 0],\r\n            [0, 'Z', 'Z'],\r\n            [0, 0, 0],\r\n        ],\r\n        color: '227, 78, 78',\r\n    },\r\n    \r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = \r\n        tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n}","import {useState, useEffect, useLayoutEffect, useCallback} from 'react';\r\nimport {createStage} from '../gameHelpers';\r\n\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(()=>{\r\n      setRowsCleared(0);\r\n\r\n      const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if(row.findIndex(cell => cell[0] ===0) === -1) {\r\n          setRowsCleared(prev => prev +1);\r\n          //O mÃ©todo unshift Adiciona um ou mais elementos no inÃ­cio de um array e retorna o nÃºmero de elementos (propriedade length) atualizado.\r\n          //vai acrescentar o nÃºmero de colunas deletadas ao topo do campo do jogo\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          //DÃ¡ a impressÃ£o de que as colunas restantes desceram\r\n          return ack\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n        const updateStage = prevStage =>{\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n              );\r\n        \r\n              // Then draw the tetromino\r\n              player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                  if (value !== 0) {\r\n                    newStage[y + player.pos.y][x + player.pos.x] = [\r\n                      value,\r\n                      `${player.collided ? 'merged' : 'clear'}`,\r\n                    ];\r\n                  }\r\n                });\r\n              });\r\n              //Verificar colisÃµes\r\n              if(player.collided) {\r\n                resetPlayer();\r\n                return sweepRows(newStage);\r\n              }\r\n              return newStage;\r\n            };\r\n\r\n        setStage(prev => updateStage(prev));\r\n\r\n    }, [ player,\r\n    resetPlayer,])\r\n\r\n    return[stage, setStage, rowsCleared]\r\n}","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${props => (props.gameOver ? 'red' : '#999')};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n\r\n  @media(max-width: 930px){\r\n    margin:2px;\r\n    margin-bottom:15px;\r\n    font-size: 0.6rem;\r\n  }\r\n\r\n`;","import React from 'react';\r\n\r\nimport {StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({gameOver, text}) => (\r\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n)\r\nexport default Display;","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  /* border-radius: 5px; */\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`;","import React from 'react'\r\n\r\nimport { StyledCell } from './styles/StyledCell';\r\n\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({type}) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}/>\r\n)\r\nexport default Cell;","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(25vw / ${props => props.width})\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n\r\n  @media(max-width: 930px){\r\n    max-width: 90vw;\r\n    max-height: 75vh;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    margin-bottom: 20px;\r\n    grid-template-rows: repeat(\r\n      ${props => props.height},\r\n      calc(90vw / ${props => props.width})\r\n    );\r\n  }\r\n`;","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nimport {StyledStage} from './styles/StyledStage';\r\n\r\nconst Stage = ({stage}) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type ={cell[0]}/>))}\r\n    </StyledStage>\r\n)\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`","import React from 'react';\r\nimport {StyledStartButton} from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({callback}) => (\r\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n)\r\nexport default StartButton;","import React from 'react';\r\nimport {StyledStartButton} from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({callback, icon}) => (\r\n    <StyledStartButton onClick={callback}>{icon}</StyledStartButton>\r\n)\r\nexport default StartButton;","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\n\r\n//componentes Personalizados com CSS\r\nimport { StyledTetris } from './styles/StyledTetris';\r\nimport { StyledTetrisWrapper } from './styles/StyledTetris';\r\n\r\n//Custom Hooks\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useEffect } from 'react';\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n//components\r\nimport Display from './Display';\r\nimport Stage from './Stage';\r\nimport StartButton from './StartButton';\r\nimport ArrowButton from './ArrowButton';\r\n\r\nconst Tetris = () => {\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n\r\n    const [isMobile, setIsMobile] = useState(width <= 930);\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n    console.log('renderizando')\r\n\r\n    const movePlayer = dir => {\r\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n            updatePlayerPos({ x: dir, y: 0 });\r\n        }\r\n    };\r\n\r\n    const startGame = () => {\r\n        //reiniciar\r\n        setStage(createStage());\r\n        setDropTime(1000);\r\n        resetPlayer();\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n        setGameOver(false);\r\n\r\n    }\r\n\r\n    const leftTile = () => {\r\n        movePlayer(-1);\r\n    }\r\n\r\n    const turnTile = () => {\r\n        playerRotate(stage, 1);\r\n    }\r\n\r\n    const rightTile = () => {\r\n        //reiniciar\r\n        movePlayer(1);\r\n    }\r\n\r\n    const drop = () => {\r\n        //Sobe de nivel a cada 10 colunas limpas\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n            setDropTime(1000 / (level + 1) + 200)\r\n        }\r\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n            updatePlayerPos({ x: 0, y: 1, collided: false })\r\n        } else {\r\n            if (player.pos.y < 1) {\r\n                console.log(\"Fim!\");\r\n                setGameOver(true);\r\n            }\r\n            updatePlayerPos({ x: 0, y: 0, collided: true })\r\n        }\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n        setDropTime(null)\r\n        drop();\r\n    }\r\n\r\n    const keyUp = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 40 || keyCode === 83) {\r\n                setDropTime(1000 / (level + 1) + 200)\r\n            }\r\n        }\r\n    }\r\n\r\n    const move = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 37 || keyCode === 65) {\r\n                movePlayer(-1);\r\n            } else if (keyCode === 39 || keyCode === 68) {\r\n                movePlayer(1);\r\n            } else if (keyCode === 40 || keyCode === 83) {\r\n                dropPlayer();\r\n            } else if (keyCode === 38 || keyCode === 87) {\r\n                playerRotate(stage, 1);\r\n            }\r\n        }\r\n        console.log(keyCode)\r\n    }\r\n\r\n    //FunÃ§Ã£o achada na insternet que estÃ¡ nos hooks (useInterval)\r\n    //Recebe uma funÃ§Ã£o para realizar e um tempo de repetiÃ§Ã£o\r\n    useInterval(() => {\r\n        drop();\r\n    }, dropTime)\r\n\r\n    return (\r\n        <StyledTetrisWrapper\r\n            role='button'\r\n            tabIndex=\"0\"\r\n            onKeyDown={e => move(e)}\r\n            onKeyUp={keyUp}>\r\n            <StyledTetris>\r\n                <Stage stage={stage} />\r\n                <aside className='aside'>\r\n                    {gameOver ? (\r\n                        <div>\r\n                            <Display gameOver={gameOver} text=\"game Over\" />\r\n                            <Display gameOver={gameOver} text=\"Hehe perdeu\" />\r\n                            <Display text={`Score ${score}`} />\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <Display text={`Score ${score}`} />\r\n                            <Display text={`Rows ${rows}`} />\r\n                            <Display text={`Level ${level}`} />\r\n                        </div>\r\n                    )}\r\n                    {isMobile ? (\r\n                        <div>\r\n                        <ArrowButton callback={leftTile} icon={'<---'} />\r\n                        <ArrowButton callback={turnTile} icon={'girar'} />\r\n                        <ArrowButton callback={rightTile} icon={'--->'} />\r\n                    </div>\r\n                    ) : (\r\n                        <div>\r\n                        </div>\r\n                    )\r\n\r\n                    }\r\n                    <StartButton callback={startGame} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n\r\n    )\r\n}\r\n\r\nexport default Tetris","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    });\r\n\r\n    const updatePlayerPos = ({ x, y, collided }) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n            collided,\r\n        }))\r\n\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n            tetromino: randomTetromino().shape,\r\n            collided: false,\r\n        })\r\n    }, [])\r\n\r\n    const rotate = (matrix, dir) => {\r\n        //Matriz transposta\r\n        const rotatedTetro = matrix.map((_, index) =>\r\n            matrix.map(col => col[index]),\r\n        );\r\n        // Matriz reversa\r\n        if (dir > 0) return rotatedTetro.map(row => row.reverse());\r\n        return rotatedTetro.reverse();\r\n    }\r\n\r\n    const playerRotate = (stage, dir) => {\r\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir)\r\n\r\n        const pos = clonedPlayer.pos.x;\r\n        let offset = 1;\r\n        //Tenta entender essa bexiguinha\r\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n            clonedPlayer.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n            if (offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -dir);\r\n                clonedPlayer.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n\r\n        setPlayer(clonedPlayer)\r\n    }\r\n\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n}","import {useState, useEffect, useCallback} from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState (0);\r\n    const [rows, setRows] = useState (0);\r\n    const [level, setLevel] = useState (0);\r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(()=>{\r\n        //Se jÃ¡ tem pontos\r\n        if (rowsCleared > 0) {\r\n            //fÃ³rmula da internet\r\n            setScore(prev => prev + linePoints[rowsCleared-1] * (level + 1));\r\n            setRows(prev => prev +rowsCleared);\r\n        }\r\n    }, [level, linePoints, rowsCleared]);\r\n\r\n    useEffect (() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score])\r\n\r\n    return [ score, setScore, rows, setRows, level, setLevel]\r\n}","\r\nimport { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}","import React from 'react';\r\nimport Tetris from './components/Tetris';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"\">\r\n      <Tetris />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}